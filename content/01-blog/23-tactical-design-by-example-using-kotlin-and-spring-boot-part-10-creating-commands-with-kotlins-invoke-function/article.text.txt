Title:

Tactical Design by Example - Using Kotlin and Spring Boot (Part 10) - Creating Commands with Kotlin's invoke method

----

Description:

Tactical Design by Example - Using Kotlin and Spring Boot (Part 10) - Creating Commands with Kotlin's invoke method

----

Date:

11/11/2020

----

Tags:

ddd, kotlin, hexagon architecture, spring boot, event storming, command, policy, application service

----

Text:

I wanted to elaborate on behaviour-centric development, but that didn't happen. Maybe I will get back to that later. Here's something different I have learned recently, the power of Kotlin's _invoke_ method.

## Revisiting commands

In (link:blog/tactical-design-by-example-using-kotlin-and-spring-boot-part-4 text:part four) I talked about a similar example of a command

```kotlin
data class UpdateDepositPrice(
    val articleId: String,
    val refundPrice: Int,
    val currency: Currency,
    val currencyUnit: CurrencyUnit
) : Command() {
    companion object {
        fun create(priceUpdated: PriceUpdated): UpdateDepositPrice {
            val articleId = priceUpdated.getArticleId()

            requireNotNull(articleId) { "No article id found in listing!" }

            return UpdateDepositPrice(
                articleId,
                priceUpdated.price.customAttributes.refund,
                Currency.valueOf(priceUpdated.price.currency),
                CurrencyUnit.valueOf(priceUpdated.price.unit)
            )
        }
    }
}
```

### Problems

While this is a perfectly valid way to implement it, a few things bugged me about it

 * _requireNotNull_ throws an exception, which is quite harsh and requires handling.
 * The _create_ method is syntactical overhead that is distracting

```kotlin
try {
    UpdateDepositPrice.create(priceUpdated).let {
        workflow.process(it)
    }
} catch (e: IllegalArgumentException) {
    log.warn(e.message)
}
```

## A more idiomatic approach

What I wanted to achieve was to have a constructor-like invokation, that returns an optional command. And this is exactly what you can achieve with Kotlin's _invoke_ method.

```kotlin
data class UpdateDepositPrice(
    val articleId: String,
    val refundPrice: Int,
    val currency: Currency,
    val currencyUnit: CurrencyUnit
) : Command() {
    companion object {
        operator fun invoke(priceUpdated: PriceUpdated): UpdateDepositPrice? {
            return priceUpdated.getArticleId()?.let {
                UpdateDepositPrice(
                    articleId,
                    priceUpdated.price.customAttributes.refund,
                    Currency.valueOf(priceUpdated.price.currency),
                    CurrencyUnit.valueOf(priceUpdated.price.unit)
                )
            }
        }
    }
}
```

### Result

Now this feels more like a constructor when using it, although it is just the invokation operator _()_ being called on the companion object.

And at the same time, there is no more exception handling necessary

```kotlin
UpdateDepositPrice(priceUpdated)?.also {
    workflow.process(it)
} ?: log.warn("message")
```

Instead of returning _null_ I could also return an (link:https://arrow-kt.io/docs/apidocs/arrow-core-data/arrow.core/-either/ text:Either)-like object, that would contain detailed information of possibly errors, which could be logged in the adapter.

Go back to (link:blog/tactical-design-by-example-using-kotlin-and-spring-boot-part-9-behaviour-not-data text:part nine).




