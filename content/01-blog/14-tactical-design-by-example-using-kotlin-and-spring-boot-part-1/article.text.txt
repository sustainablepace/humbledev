Title:

Tactical Design by Example - Using Kotlin and Spring Boot (Part 1)

----

Description:

Tactical Design by Example - Using Kotlin and Spring Boot (Part 1)

----

Date:

06/25/2020

----

Tags:

ddd, hexagon architecture, event storming, kotlin, spring boot

----

Text:

I'm starting an experiment. Currently I'm taking part in a (link:https://sustainablepace.net/working-out-loud text:Working Out Loud) circle at REWE digital. My objective is to better understand Domain Driven Design's tactical design by implementing its ideas in the real world.

I've decided to share my learning goal and my (link:humble text:humble) progress here - I would love to find other developers who are interested in learning more about this, hopefully learning together as we go along, and sharing the results in this blog.

This experiment will go on for 3 months, as long as the Working Out Loud circle. So hopefully I will have learned enough to write twelve blog posts by autumn.

In this first post, I want to describe my goal as precisely as possible, and find interested developers. So here we go.

> My goal:
>
> Based on Event Storming and Hexagon Architecture I want to create a set of building blocks, using Kotlin and Spring Boot. These building blocks can be used to assemble ÂµServices that solve real world problems.

In March I talked about some of these things at the DDD Cologne Meetup. Here are my (link:https://baudson.de/slides/2020.03.02.DDD.Cologne.Hexagon.Architecture.in.the.real.world.pdf text:slides).

Please don't hesitate to (link:contact text:contact) me, or (link:https://twitter.com/sustainablepace/status/1276101828241952768 text:leave a like or a comment). Even if this only sounds remotely interesting to you, and you have no idea what Event Storming or Hexagon Architecture is.

I already have an idea for part two: it will be about Refactoring Toward Deeper Insight. I have found an interesting example in my team's code base that is a good example for this.